// src/services/DiscordService.js
const { Client, GatewayIntentBits } = require('discord.js');
const IMessengerService = require('../interfaces/IMessengerService');
const logger = require('../utils/logger');

/**
 * Service for managing interactions with the Discord API.
 * Implements the IMessengerService interface, providing methods for sending messages,
 * fetching chat history, and other Discord-specific functionalities.
 */
class DiscordService extends IMessengerService {
    static instance;
    client;

    /**
     * Constructs the DiscordService instance, setting up the Discord client with necessary intents.
     */
    constructor() {
        super();
        if (DiscordService.instance) {
            return DiscordService.instance;
        }
        this.client = new Client({
            intents: [
                GatewayIntentBits.Guilds,
                GatewayIntentBits.GuildMessages,
                GatewayIntentBits.MessageContent,
            ]
        });
        this.initialize();
        DiscordService.instance = this;
    }

    /**
     * Initializes the Discord client and sets up event handlers.
     */
    initialize() {
        this.client.once('ready', () => {
            logger.info(`Connected to Discord as ${this.client.user.tag}`);
        });

        this.client.on('messageCreate', this.handleMessageCreate.bind(this));
        this.login();
    }

    /**
     * Logs the client into Discord using the bot token.
     */
    login() {
        const token = process.env.DISCORD_TOKEN;  // Ensure the token is stored securely
        if (!token) {
            logger.error('DISCORD_TOKEN is not defined. Exiting...');
            process.exit(1);
        }
        this.client.login(token).catch(error => {
            logger.error('Failed to log in to Discord:', error);
            process.exit(1);
        });
    }

    /**
     * Event handler for Discord's 'messageCreate' event.
     * @param {Message} message - The Discord message object.
     */
    async handleMessageCreate(message) {
        if (message.author.bot) return;  // Ignore all bots
        console.log(`Message from ${message.author.username}: ${message.content}`);
        // Additional processing can be implemented here
    }

    /**
     * Fetches chat history from a specified channel.
     * @param {string} channelId - The ID of the channel to fetch history from.
     * @returns {Promise<Array>} A promise that resolves to an array of message objects.
     */
    async fetchChatHistory(channelId) {
        const channel = await this.client.channels.fetch(channelId);
        if (!channel.isText()) {
            throw new Error("Cannot fetch messages from a non-text channel.");
        }
        const messages = await channel.messages.fetch({ limit: 100 });
        return messages.map(message => ({ content: message.content, author: message.author.username }));
    }

    /**
     * Sends a message to a specified channel.
     * @param {string} channelId - The ID of the channel to send the message to.
     * @param {string} message - The message text to send.
     * @returns {Promise<void>}
     */
    async sendResponse(channelId, message) {
        const channel = await this.client.channels.fetch(channelId);
        if (!channel.isText()) {
            throw new Error("Cannot send messages to a non-text channel.");
        }
        await channel.send(message);
    }

    /**
     * Retrieves the singleton instance of the DiscordService.
     * @returns {DiscordService} The singleton instance.
     */
    static getInstance() {
        if (!DiscordService.instance) {
            new DiscordService();
        }
        return DiscordService.instance;
    }
}

module.exports = DiscordService;
