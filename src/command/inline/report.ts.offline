import Debug from "debug";
const debug = Debug("app");

import { InlineCommand } from '@src/command/types/InlineCommand';
import { IMessage } from '@src/message/interfaces/IMessage';
import { TextChannel, MessageCollector } from 'discord.js';
import Debug from 'debug';
const debug = Debug('app:command:report');
export class ReportCommand extends InlineCommand {
    constructor() {
        super('report', 'User reports about issues or rule violations. Usage: !report [text]');
    }
    /**
     * Executes the report command, prompting the user for details and handling the report.
     */
    async execute(args: { message: IMessage }): Promise<{ success: boolean, message: string, error?: string }> {
        const { message } = args;
        const filter = (m: IMessage) => m.getAuthorId() === message.getAuthorId();
        // Prompt user to describe the issue
        await message.sendMessage('Please describe the issue you are reporting within the next 30 seconds:');
        debug('Prompted ' + message.getAuthorTag() + ' to describe the issue.');
        try {
            // Await user's response with a 30-second timeout
            const collected = await message.awaitMessages({ filter, max: 1, time: 30000, errors: ['time'] });
            const reportDescription = collected.first()?.getContent().toLowerCase();
            debug('Collected report description: ' + reportDescription);
            // Check if the report contains specific keywords
            if (reportDescription?.includes('spam') || reportDescription?.includes('harassment')) {
                await this.initiateModeratorVote(message, reportDescription);
            } else {
                await message.sendMessage('Thank you for the report. Our team will look into this matter.');
            }
        } catch (error: any) {
            await this.handleErrors(message, error);
        }
        return { success: true, message: 'Report processed successfully.' };
    }
    /**
     * Initiates a moderator vote if the report is of a serious nature.
     */
    private async initiateModeratorVote(message: IMessage, reportDescription: string): Promise<void> {
        const moderationTeamRole = message.getGuild()?.roles?.cache.find(role => role.name === 'Moderation Team');
        // Ensure the moderation role exists
        if (!moderationTeamRole) {
            debug('Moderation Team role not found in the guild.');
            await message.sendMessage('Unable to initiate vote. Moderation Team role is missing.');
            return;
        }
        const onlineModerators = moderationTeamRole.members.filter(member => member.presence?.status === 'online');
        // Guard clause if no moderators are online
        if (!onlineModerators.size) {
            await message.sendMessage('No online moderators available to initiate a vote.');
            return;
        }
        // Prepare the embed for the moderator vote
        const embed = {
            title: 'Moderation Vote Required',
            description: 'A report has been filed for: ' + reportDescription,
            fields: [{ name: 'Reported by', value: message.getAuthorTag() }],
            color: 15105570,  // ORANGE color in decimal
            timestamp: new Date().toISOString(),
        };
        // Find the moderator vote channel
        const moderatorChannel = message.getGuild()?.channels?.cache.find(
            (ch): ch is TextChannel => ch.name === 'moderator-vote' && ch instanceof TextChannel
        );
        // Guard clause if the moderator channel is not found
        if (!moderatorChannel) {
            debug('Moderator vote channel not found.');
            await message.sendMessage('Unable to initiate vote. Moderator vote channel is missing.');
            return;
        }
        // Send the embed to the moderator channel
        await moderatorChannel.send({ embeds: [embed] });
        debug('Moderator vote initiated.');
        // Collect votes for 1 minute
        const voteCollector = new MessageCollector(moderatorChannel, { time: 60000 });
        voteCollector.on('collect', msg => {
            if (msg.content.toLowerCase() === '!agree' && onlineModerators.has(msg.author.id)) {
                debug('Vote collected from ' + msg.author.tag + ': !agree');
                // Logic to count votes and make a decision
            }
        });
        voteCollector.on('end', () => {
            moderatorChannel.send('Voting ended. Decision: ...');  // Replace with the actual decision
            debug('Voting ended.');
        });
    }
    /**
     * Handles errors that occur during the command execution.
     */
    private async handleErrors(message: IMessage, error: any): Promise<void> {
        if (error.message === 'time') {
            await message.sendMessage('You did not provide any report details in time. Please try again.');
            debug('Report timed out without user input.');
        } else {
            debug('Error in ReportCommand: ' + error.message);
            await message.sendMessage('An error occurred while processing your report. Please try again.');
        }
    }
}
