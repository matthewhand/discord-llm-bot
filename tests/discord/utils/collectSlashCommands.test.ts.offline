import * as fs from 'fs';
import { collectSlashCommands } from '@src/discord/utils/collectSlashCommands';

jest.mock('fs');

// jest.mock('utils/logger', () => ({
//     warn: jest.fn(),
//     info: jest.fn(),
//     error: jest.fn(),
//     debug: jest.fn(),
// }));

describe('collectSlashCommands', () => {
    const mockCommandsPath = './commands';
    const mockCommandFiles = ['command1.js', 'command2.js'];

    beforeEach(() => {
        // Mock fs.readdirSync to return the mock command files
        (fs.readdirSync as jest.Mock).mockReturnValue(mockCommandFiles);

        // Mock require to return mock command data
        jest.mock('../../commands/command1.js', () => ({
            data: { toJSON: () => ({ name: 'command1' }) }
        }), { virtual: true });

        jest.mock('../../commands/command2.js', () => ({
            data: { toJSON: () => ({ name: 'command2' }) }
        }), { virtual: true });
    });

    afterEach(() => {
        jest.clearAllMocks();
    });

    it('should collect slash commands from the specified directory', () => {
        const result = collectSlashCommands(mockCommandsPath);

        // Assertions
        expect(fs.readdirSync).toHaveBeenCalledWith(mockCommandsPath);
        expect(result).toHaveLength(2);
        expect(result).toEqual([{ name: 'command1' }, { name: 'command2' }]);
    });

    it('should handle missing command data gracefully', () => {
        // Mock require to return undefined data for one command
        jest.mock('../../commands/command2.js', () => ({}), { virtual: true });

        const result = collectSlashCommands(mockCommandsPath);

        // Assertions
        expect(result).toHaveLength(1);
        expect(result).toEqual([{ name: 'command1' }]);
    });

    it('should throw an error if commandsPath is not provided', () => {
        expect(() => collectSlashCommands('')).toThrow('collectSlashCommands: The commandsPath parameter is required.');
    });
});

