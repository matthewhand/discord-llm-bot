// DiscordManager.test.js

// Mocking the DiscordManager to include the getLastMessageTimestamp method
jest.mock('../../src/managers/DiscordManager', () => ({
  getInstance: jest.fn().mockImplementation(() => ({
      sendMessage: jest.fn().mockResolvedValue(true),
      startTyping: jest.fn().mockResolvedValue(true),
      stopTyping: jest.fn().mockResolvedValue(true),
      getLastMessageTimestamp: jest.fn().mockReturnValue(1625112000000),  // Example fixed timestamp
  })),
}));

const DiscordManager = require('../../src/managers/DiscordManager');

describe('DiscordManager functionality', () => {
  beforeEach(() => {
      // Ensures that all mocks are cleared and reset before each test
      jest.clearAllMocks();
  });

  it('should retrieve the last message timestamp correctly', () => {
      const channelId = '1234567890';
      const timestamp = DiscordManager.getInstance().getLastMessageTimestamp(channelId);
      expect(timestamp).toBe(1625112000000);  // Expect the fixed timestamp we set in the mock
      expect(DiscordManager.getInstance().getLastMessageTimestamp).toHaveBeenCalledWith(channelId);
  });

  it('should handle sending messages correctly', async () => {
      const channelId = '0987654321';
      const message = "Hello, world!";
      await DiscordManager.getInstance().sendMessage(channelId, message);
      expect(DiscordManager.getInstance().sendMessage).toHaveBeenCalledWith(channelId, message);
  });

  it('should handle typing indicators correctly', async () => {
      const channelId = '1122334455';
      await DiscordManager.getInstance().startTyping(channelId);
      expect(DiscordManager.getInstance().startTyping).toHaveBeenCalledWith(channelId);

      await DiscordManager.getInstance().stopTyping(channelId);
      expect(DiscordManager.getInstance().stopTyping).toHaveBeenCalledWith(channelId);
  });
});
