src/common/config/ConfigurationManager.ts:import Logger from '@utils/logger';
src/common/config/ConfigurationManager.ts:            logger.warn(`Configuration key ${key} not found. Using default value.`);
src/common/errors/handleError.ts:import Logger from '@utils/logger';
src/common/errors/handleError.ts:    logger.warn('[handleError]: DEPRECATED - use utils/commonUtils instead!');
src/common/errors/handleError.ts:    logger.error('An error occurred: ' + error.message);
src/common/errors/handleError.ts:    logger.error('Error Stack Trace: ' + error.stack);
src/command/common/mute.ts:import { logger } from '@utils/logger';
src/command/common/mute.ts:        logger.info('User ' + target.user.tag + ' has been muted.');
src/command/common/mute.ts:        logger.error('Failed to mute user: ' + target.user.tag, error);
src/command/common/perplexity.ts:import Logger from '@utils/logger';
src/command/common/replicate.ts:import Logger from '@utils/logger';
src/command/common/server.ts:import Logger from '@utils/logger';
src/command/isCommand.ts:import Logger from '@utils/logger';
src/command/isCommand.ts:    logger.debug(`isCommand: ${text} - ${isCmd}`);
src/command/inline/mute.ts:import Logger from '@utils/logger';
src/command/inline/http.ts:import Logger from '@utils/logger';
src/command/inline/http.ts:            logger.error('HTTPCommand: No URL provided');
src/command/inline/http.ts:            logger.info('HTTPCommand: Successfully fetched data from ' + url);
src/command/inline/http.ts:            logger.error('HTTPCommand: Error fetching data from ' + url + ' - ' + error.message);
src/command/inline/memgpt.ts:import Logger from '@utils/logger';
src/command/inline/memgpt.ts:            logger.debug('MemGPTCommand: Request sent to MemGPT for agent ' + action + ' with message: ' + messageContent);
src/command/inline/memgpt.ts:            logger.debug('MemGPTCommand: Response received from MemGPT with data: ' + response.data);
src/command/inline/memgpt.ts:            logger.error('MemGPTCommand execute error: ' + error.message);
src/command/inline/oai.ts:import Logger from '@utils/logger';
src/command/inline/oai.ts:        logger.info('OAICommand: Generating response for prompt: ' + prompt);
src/command/inline/oai.ts:                logger.info('OAICommand: Response generated successfully');
src/command/inline/oai.ts:                logger.warn('OAICommand: No response generated.');
src/command/inline/oai.ts:            logger.error('OAICommand execute error: ' + error.message);
src/command/inline/help.ts.offline:import Logger from '@utils/logger';
src/command/inline/help.ts.offline:        logger.warn('[executeHelpCommand] No message object provided.');
src/command/inline/help.ts.offline:    logger.debug(`[executeHelpCommand] Attempting to execute help command with prefix: ${prefix}`);
src/command/inline/help.ts.offline:        .then(() => logger.debug('[executeHelpCommand] Help command executed successfully.'))
src/command/inline/help.ts.offline:        .catch(error => logger.error('[executeHelpCommand] Error sending help message: ' + error));
src/command/inline/ban.ts:import Logger from '@utils/logger';
src/command/inline/ban.ts:            logger.error(errorMessage);
src/command/inline/ban.ts:            logger.error(errorMessage);
src/command/inline/ban.ts:                logger.error(errorMessage);
src/command/inline/ban.ts:            logger.info(successMessage);
src/command/inline/ban.ts:            logger.error('Failed to ban user: ' + error.message);
src/command/inline/report.ts:import Logger from '@utils/logger';
src/command/inline/report.ts:        logger.debug(`Prompted ${message.author.tag} to describe the issue.`);
src/command/inline/report.ts:            logger.debug(`Collected report description: ${reportDescription}`);
src/command/inline/report.ts:            logger.warn('Moderation Team role not found in the guild.');
src/command/inline/report.ts:            logger.warn('Moderator vote channel not found.');
src/command/inline/report.ts:        logger.info('Moderator vote initiated.');
src/command/inline/report.ts:                logger.debug(`Vote collected from ${msg.author.tag}: !agree`);
src/command/inline/report.ts:            logger.info('Voting ended.');
src/command/inline/report.ts:            logger.warn('Report timed out without user input.');
src/command/inline/report.ts:            logger.error('Error in ReportCommand: ' + error.message);
src/command/inline/replicate.ts:import Logger from '@utils/logger';
src/command/inline/index.ts:import Logger from '@utils/logger';
src/command/inline/index.ts:        logger.warn('File ' + file + ' does not export a valid Command instance or class.');
src/command/inline/index.ts:        logger.info('Dynamically loaded command: ' + commandInstance.name);
src/command/inline/index.ts:        logger.warn('File ' + file + ' does not export a valid Command instance or class.');
src/command/inline/index.ts:logger.info('Dynamically loaded commands:', Object.keys(commands));
src/command/inline/flowise.ts:import Logger from '@utils/logger';
src/command/inline/flowise.ts:            logger.error(errorMessage);
src/command/inline/flowise.ts:        logger.debug('Flowise API base URL: ' + apiUrl);
src/command/inline/flowise.ts:            logger.error(errorMessage);
src/command/inline/flowise.ts:        logger.debug('Endpoint ID: ' + endpointId);
src/command/inline/flowise.ts:        logger.debug('Constructed Flowise API URL: ' + url);
src/command/inline/flowise.ts:            logger.debug('Flowise API response status: ' + response.status);
src/command/inline/flowise.ts:            logger.error('Flowise API request failed: ' + error.message);
src/command/types/Command.ts:import Logger from '@utils/logger';
src/command/types/Command.ts:        logger.info('Running command: ' + this.name);
src/command/parseCommandDetails.ts:import Logger from '@utils/logger';
src/command/parseCommandDetails.ts:        logger.error(`parseCommandDetails: Invalid command format - ${text}`);
src/command/parseCommandDetails.ts:    logger.debug(`parseCommandDetails: command - ${command}, args - [${args.join(', ')}]`);
src/command/handlers/slashCommandHandler.ts:import Logger from '@utils/logger';
src/command/handlers/slashCommandHandler.ts:            logger.warn(`The command at ${filePath} is missing a required "data" or "execute" property.`);
src/command/handlers/slashCommandHandler.ts:            logger.warn(`The command at ${filePath} is missing a required "data" or "execute" property.`);
src/command/handlers/slashCommandHandler.ts:        logger.info(`Started refreshing ${commands.length} application (/) commands.`);
src/command/handlers/slashCommandHandler.ts:        logger.info(`Successfully reloaded ${Array.isArray(data) ? data.length : 0} application (/) commands.`);
src/command/handlers/slashCommandHandler.ts:        logger.error('Error registering commands:', error);
src/command/handlers/slashCommandHandler.ts:            logger.error('Missing Access: The bot does not have permissions to register slash commands in the guild.');
src/command/handlers/slashCommandHandler.ts:            logger.error('Missing Permissions: The bot lacks necessary permissions to execute this operation.');
src/command/handlers/slashCommandHandler.ts:                logger.error(`Error executing command ${interaction.commandName}:`, error);
src/command/handlers/slashCommandHandler.ts:            logger.warn(`No executor found for command ${interaction.commandName}`);
src/command/slash/quivr.ts.offline:import Logger from '@utils/logger';
src/command/slash/quivr.ts.offline:            logger.error('Quivr base URL is undefined.');
src/command/slash/quivr.ts.offline:            logger.error('Quivr chat ID is undefined.');
src/command/slash/quivr.ts.offline:        logger.debug('Quivr command executed with:', { quivrBaseUrl, quivrChatId, quivrBrainId });
src/command/slash/quivr.ts.offline:            logger.error('Failed to send request to Quivr:', error);
src/command/slash/replicate.ts:import Logger from '@utils/logger';
src/command/commandSetup.ts:import Logger from '@utils/logger';
src/command/commandSetup.ts:        logger.debug('Dynamically loaded command: ' + commandModule.data.name + ' with data:', commandModule.data);
src/command/commandSetup.ts:        logger.warn('[WARNING] Command module ' + file + ' is missing required properties.');
src/command/CommandManager.ts:import Logger from '@utils/logger';
src/command/CommandManager.ts:        logger.debug('CommandManager initialized with commands and aliases.');
src/command/CommandManager.ts:                        logger.error('The command module ' + file + ' does not export a class or valid object. Export type: ' + typeof CommandModule);
src/command/CommandManager.ts:                        logger.debug('Command loaded: ' + commandName);
src/command/CommandManager.ts:                        logger.error('The command module ' + file + ' does not export a valid command instance. Export type: ' + typeof CommandModule);
src/command/CommandManager.ts:                    logger.error('Failed to load command ' + commandName + ': ' + error.message);
src/command/CommandManager.ts:            logger.debug("Text does not start with '!', not a command.");
src/command/CommandManager.ts:            logger.error('Failed to parse command details.');
src/command/CommandManager.ts:        logger.debug('Executing command: ' + commandDetails.command + ' with arguments: [' + commandDetails.args.join(', ') + ']');
src/command/CommandManager.ts:            logger.error('Command execution failed: ' + executionResult.error);
src/command/CommandManager.ts:            logger.debug('Command executed successfully: ' + executionResult.result);
src/command/executeParsedCommand.ts:import Logger from '@utils/logger';
src/command/executeParsedCommand.ts:        logger.error('executeParsedCommand: commandDetails not provided');
src/command/executeParsedCommand.ts:        logger.error(`executeParsedCommand: Command not found - ${commandName}`);
src/command/executeParsedCommand.ts:        logger.debug(`executeParsedCommand: Executed command - ${commandName}, Result - ${result}`);
src/command/executeParsedCommand.ts:        logger.error(`executeParsedCommand: Error executing command - ${commandName}, Error - ${error.message}`);
src/message/followUp/sendResponse.ts:import Logger from '@utils/logger';
src/message/followUp/sendResponse.ts:            logger.debug('[sendResponse] Sending part ' + (i + 1) + ' to channel ' + channelId + '. Part content: ' + parts[i]);
src/message/followUp/sendResponse.ts:            logger.debug('[sendResponse] Sent part ' + (i + 1) + ' of ' + parts.length + ' to channel ' + channelId + '.');
src/message/followUp/sendResponse.ts:        logger.info('[sendResponse] Message processing complete. Total time: ' + processingTime + 'ms.');
src/message/followUp/sendResponse.ts:        logger.error('[sendResponse] Failed to send message to channel ' + channelId + '. Error: ' + error.message, { error });
src/message/followUp/sendResponse.ts:    logger.debug('[splitMessageContent] Split message into ' + parts.length + ' parts.');
src/message/followUp/sendResponse.ts:        logger.debug('[sendMessagePart] Sent message part to channel ' + channelId + '. Content length: ' + part.length + '.');
src/message/followUp/sendResponse.ts:        logger.error('[sendMessagePart] Failed to send message part to channel ' + channelId + '. Error: ' + error.message, { error });
src/message/followUp/sendFollowUp.ts:import Logger from '@utils/logger';
src/message/followUp/sendFollowUp.ts:            logger.info('[sendFollowUp] Follow-up message sent successfully.');
src/message/followUp/sendFollowUp.ts:            logger.warn('[sendFollowUp] No follow-up text generated.');
src/message/followUp/sendFollowUp.ts:        logger.error('[sendFollowUp] Failed to send follow-up message. Error: ' + error.message, { error });
src/message/followUp/messageSendingUtils.ts:import Logger from '@utils/logger';
src/message/followUp/messageSendingUtils.ts:            logger.debug('[sendResponse] Sending part ' + (i + 1) + ' to channel ' + channelId + '. Part content: ' + parts[i]);
src/message/followUp/messageSendingUtils.ts:            logger.debug('[sendResponse] Sent part ' + (i + 1) + ' of ' + parts.length + ' to channel ' + channelId + '.');
src/message/followUp/messageSendingUtils.ts:        logger.info('[sendResponse] Message processing complete. Total time: ' + processingTime + 'ms.');
src/message/followUp/messageSendingUtils.ts:        logger.error('[sendResponse] Failed to send message to channel ' + channelId + '. Error: ' + error.message, { error });
src/message/followUp/messageSendingUtils.ts:    logger.debug('[splitMessageContent] Split message into ' + parts.length + ' parts.');
src/message/followUp/messageSendingUtils.ts:        logger.debug('[sendMessagePart] Sent message part to channel ' + channelId + '. Content length: ' + part.length + '.');
src/message/followUp/messageSendingUtils.ts:        logger.error('[sendMessagePart] Failed to send message part to channel ' + channelId + '. Error: ' + error.message, { error });
src/message/followUp/messageSendingUtils.ts:    logger.debug('Handling follow-up for message ID: ' + originalMessage.id);
src/message/followUp/messageSendingUtils.ts:            logger.debug('Commands loaded for follow-up.');
src/message/followUp/messageSendingUtils.ts:            logger.debug('Command descriptions compiled: ' + commandDescriptions);
src/message/followUp/messageSendingUtils.ts:                logger.error('Received empty or invalid response from OpenAI for follow-up.');
src/message/followUp/messageSendingUtils.ts:                logger.warn('No follow-up action suggested for message ID: ' + originalMessage.id);
src/message/followUp/messageSendingUtils.ts:            logger.error('Error during follow-up handling: ' + error);
src/message/sendFollowUpRequest.ts:import Logger from '@utils/logger';
src/message/sendFollowUpRequest.ts:        logger.error('Error in sendFollowUpRequest: ' + error.message);
src/message/discord/DiscordManager.ts:import Logger from '@utils/logger'; // Ensure logger is correctly imported
src/message/discord/DiscordManager.ts:        logger.info('DiscordManager: Initializing Client with intents: Guilds, GuildMessages, GuildVoiceStates');
src/message/discord/DiscordManager.ts:        logger.info('DiscordManager: Client initialized successfully');
src/message/discord/DiscordManager.ts:            logger.info('DiscordManager: Creating a new instance of DiscordManager');
src/message/discord/DiscordManager.ts:        logger.info('DiscordManager: Initializing DiscordManager.');
src/message/discord/DiscordManager.ts:                logger.error('DiscordManager: DISCORD_TOKEN is not set, exiting process with code 1');
src/message/discord/DiscordManager.ts:            logger.info('DiscordManager: Logging in with token...');
src/message/discord/DiscordManager.ts:            logger.info('DiscordManager: Setting up event handlers');
src/message/discord/DiscordManager.ts:            logger.error(errorMessage);
src/message/discord/DiscordManager.ts:        logger.info(`DiscordManager: Received message: ${message.content}`);
src/message/discord/DiscordManager.ts:        logger.info('DiscordManager: Setting message handler');
src/message/discord/DiscordManager.ts:        logger.info(`DiscordManager: Sending a message to channel ID: ${channelId}. Message: ${message}`);
src/message/discord/DiscordManager.ts:        logger.info(`DiscordManager: Connecting to voice channel ID: ${channelId}`);
src/message/discord/DiscordManager.ts:        logger.info('DiscordManager: Playing welcome message');
src/message/discord/types/DiscordMessage.ts:import Logger from '@utils/logger';
src/message/discord/types/DiscordMessage.ts:            logger.error('DiscordMessage constructor: message parameter is undefined or null.');
src/message/discord/types/DiscordMessage.ts:        logger.debug('[DiscordMessage] Initializing with message ID: ' + message.id);
src/message/discord/types/DiscordMessage.ts:            logger.error('[DiscordMessage]: message content is undefined or null.');
src/message/discord/types/DiscordMessage.ts:        logger.debug('DiscordMessage initialized with constants: ' + JSON.stringify(constants));
src/message/discord/utils/registerSlashCommands.ts:import Logger from '@utils/logger';
src/message/discord/utils/registerSlashCommands.ts:        logger.info('Registering ' + commands.length + ' slash commands.');
src/message/discord/utils/registerSlashCommands.ts:        logger.info('Successfully registered slash commands.');
src/message/discord/utils/registerSlashCommands.ts:        logger.error('Failed to register slash commands: ' + (error instanceof Error ? error.message : String(error)));
src/message/discord/utils/setupEventHandlers.ts:import Logger from '@utils/logger';
src/message/discord/utils/setupEventHandlers.ts:            logger.debug('[DiscordManager] Received message object: ' + JSON.stringify(discordMessage));
src/message/discord/utils/setupEventHandlers.ts:                logger.error('[DiscordManager] Discord client is not initialized.');
src/message/discord/utils/setupEventHandlers.ts:                logger.error('[DiscordManager] Invalid or incomplete message received: ID: ' + processedMessage.getMessageId() + ', Content: ' + processedMessage.getText());
src/message/discord/utils/setupEventHandlers.ts:                logger.debug('[DiscordManager] Skipping response to own message ID: ' + processedMessage.getMessageId());
src/message/discord/utils/setupEventHandlers.ts:            logger.debug('[DiscordManager] Processed message ID: ' + processedMessage.getMessageId());
src/message/discord/utils/setupEventHandlers.ts:                logger.error('[DiscordManager] Processed message has no valid channel ID.');
src/message/discord/utils/setupEventHandlers.ts:                logger.error('[DiscordManager] Could not fetch channel with ID: ' + channelId);
src/message/discord/utils/setupEventHandlers.ts:            logger.debug('[DiscordManager] Fetched channel: ' + channel.id);
src/message/discord/utils/setupEventHandlers.ts:                logger.info('Channel topic: ' + (channel.topic || 'No topic') + '. History messages count: ' + historyMessages.length);
src/message/discord/utils/setupEventHandlers.ts:                logger.debug('Executing message handler on channel ' + channel.id);
src/message/discord/utils/setupEventHandlers.ts:            logger.error('[DiscordManager] Error processing message: ' + (error instanceof Error ? error.message : String(error)), { error });
src/message/discord/utils/fetchMessages.ts:import Logger from '@utils/logger';
src/message/discord/utils/fetchMessages.ts:        logger.error('fetchMessages was called with an undefined or null client.');
src/message/discord/utils/fetchMessages.ts:        logger.error('fetchMessages was called on a client with an undefined or null channels collection.');
src/message/discord/utils/fetchMessages.ts:            logger.error('Channel with ID ' + channelId + ' could not be fetched or does not exist.');
src/message/discord/utils/fetchMessages.ts:        logger.error('Error fetching messages from Discord for channel ID ' + channelId + ': ' + (error instanceof Error ? error.message : String(error)));
src/message/discord/utils/sendMessageToChannel.ts:import Logger from '@utils/logger';
src/message/discord/utils/sendMessageToChannel.ts:    logger.info('Attempting to send a message to channel ID: ' + channelId + '.');
src/message/discord/utils/sendMessageToChannel.ts:        logger.error(errorMessage);
src/message/discord/utils/sendMessageToChannel.ts:        logger.info('Message sent to channel ID: ' + channelId + '.');
src/message/discord/utils/sendMessageToChannel.ts:        logger.error(errorMessage);
src/message/discord/utils/fetchChannel.ts:import Logger from '@utils/logger';
src/message/discord/utils/fetchChannel.ts:        logger.error('fetchChannel was called with an undefined or null client.');
src/message/discord/utils/fetchChannel.ts:            logger.error('Failed to fetch channel with ID: ' + channelId + '. Channel does not exist or cannot be accessed.');
src/message/discord/utils/fetchChannel.ts:        logger.debug('Channel with ID: ' + channelId + ' fetched successfully.');
src/message/discord/utils/fetchChannel.ts:        logger.error('Error fetching channel with ID: ' + channelId + ': ' + (error instanceof Error ? error.message : String(error)));
src/message/discord/utils/transcribeAudio.ts:import Logger from '@utils/logger';
src/message/discord/utils/transcribeAudio.ts:        logger.debug('transcribeAudio: Response data:', response.data);
src/message/discord/utils/transcribeAudio.ts:        logger.error('transcribeAudio: Error transcribing audio: ' + (error instanceof Error ? error.message : String(error)));
src/message/discord/utils/transcribeAudio.ts:            logger.debug('transcribeAudio: Response status: ' + error.response.status);
src/message/discord/utils/transcribeAudio.ts:            logger.debug('transcribeAudio: Response data: ' + JSON.stringify(error.response.data));
src/message/discord/utils/setupVoiceChannel.ts:import Logger from '@utils/logger';
src/message/discord/utils/setupVoiceChannel.ts:    logger.debug('VOICE_CHANNEL_ID: ' + VOICE_CHANNEL_ID);
src/message/discord/utils/setupVoiceChannel.ts:        logger.warn('VOICE_CHANNEL_ID is not set in the environment variables.');
src/message/discord/utils/setupVoiceChannel.ts:        logger.debug('Fetched channel: ' + (channel ? channel.id : 'null'));
src/message/discord/utils/setupVoiceChannel.ts:            logger.error('Channel with ID ' + VOICE_CHANNEL_ID + ' is not a valid voice channel.');
src/message/discord/utils/setupVoiceChannel.ts:            logger.error('Client user is not defined.');
src/message/discord/utils/setupVoiceChannel.ts:        logger.debug('Permissions for channel: ' + (permissions ? permissions.bitfield : 'null'));
src/message/discord/utils/setupVoiceChannel.ts:            logger.error('Unable to fetch permissions for channel: ' + channel.name);
src/message/discord/utils/setupVoiceChannel.ts:            logger.error('Missing CONNECT permission for voice channel: ' + channel.name);
src/message/discord/utils/setupVoiceChannel.ts:            logger.error('Missing SPEAK permission for voice channel: ' + channel.name);
src/message/discord/utils/setupVoiceChannel.ts:            logger.error('Missing USE_VOICE_ACTIVITY permission for voice channel: ' + channel.name);
src/message/discord/utils/setupVoiceChannel.ts:        logger.info('Attempting to join voice channel: ' + channel.name + ' (' + channel.id + ')');
src/message/discord/utils/setupVoiceChannel.ts:        logger.debug('Voice connection object:', connection);
src/message/discord/utils/setupVoiceChannel.ts:            logger.info('Successfully connected to the voice channel: ' + channel.name);
src/message/discord/utils/setupVoiceChannel.ts:            logger.warn('Disconnected from the voice channel.');
src/message/discord/utils/setupVoiceChannel.ts:            logger.warn('Voice connection destroyed.');
src/message/discord/utils/setupVoiceChannel.ts:            logger.error('Voice connection error: ' + error.message);
src/message/discord/utils/setupVoiceChannel.ts:            logger.info('User ' + userId + ' started speaking');
src/message/discord/utils/setupVoiceChannel.ts:        logger.error('Error setting up voice channel: ' + (error instanceof Error ? error.message : String(error)));
src/message/discord/utils/collectSlashCommands.ts:import Logger from '@utils/logger';
src/message/discord/utils/collectSlashCommands.ts:    logger.info('Collecting slash commands from directory: ' + commandsPath);
src/message/discord/utils/collectSlashCommands.ts:            logger.warn('No .js command files found in directory: ' + commandsPath);
src/message/discord/utils/collectSlashCommands.ts:                logger.debug('Adding command: ' + JSON.stringify(command.data.toJSON()));
src/message/discord/utils/collectSlashCommands.ts:                logger.warn('No data found in command file: ' + file);
src/message/discord/utils/collectSlashCommands.ts:        logger.error('Error collecting slash commands: ' + (error instanceof Error ? error.message : String(error)));
src/message/discord/utils/playAudioResponse.ts:import Logger from '@utils/logger';
src/message/discord/utils/playAudioResponse.ts:        logger.error('NARRATION_ENDPOINT_URL is not set in the environment variables.');
src/message/discord/utils/playAudioResponse.ts:    logger.debug('NARRATION_ENDPOINT_URL: ' + narrationEndpointUrl);
src/message/discord/utils/playAudioResponse.ts:            logger.error('Error playing audio response: ' + error.message);
src/message/discord/utils/playAudioResponse.ts:        logger.error('Error generating or playing audio response: ' + (error instanceof Error ? error.message : String(error)));
src/message/discord/utils/generateResponse.ts:import Logger from '@utils/logger';
src/message/discord/utils/generateResponse.ts:        logger.error('LLM_ENDPOINT_URL is not set in the environment variables.');
src/message/discord/utils/generateResponse.ts:    logger.debug('LLM_ENDPOINT_URL: ' + llmEndpointUrl);
src/message/discord/utils/generateResponse.ts:        logger.error('Error generating response: ' + (error instanceof Error ? error.message : String(error)));
src/message/discord/utils/sendResponse.ts:import Logger from '@utils/logger';
src/message/discord/utils/sendResponse.ts:        logger.error('sendResponse was called with an undefined or null messageText.');
src/message/discord/utils/sendResponse.ts:        logger.error('sendResponse was called with an undefined or null channelId.');
src/message/discord/utils/sendResponse.ts:            logger.error('Failed to fetch channel with ID: ' + channelId);
src/message/discord/utils/sendResponse.ts:            logger.debug('Message sent to channel ID: ' + channelId);
src/message/discord/utils/sendResponse.ts:        logger.error('Error sending message to channel ID ' + channelId + ': ' + (error instanceof Error ? error.message : String(error)));
src/message/discord/utils/sendMessage.ts:import Logger from '@utils/logger';
src/message/discord/utils/sendMessage.ts:    logger.info('Sending message to channel ID: ' + channelId + '. Message: ' + messageText);
src/message/discord/utils/loginToDiscord.ts:import Logger from '@utils/logger';
src/message/discord/utils/loginToDiscord.ts:    logger.info('Attempting to log in to Discord.');
src/message/discord/utils/loginToDiscord.ts:        logger.error(errorMessage);
src/message/discord/utils/loginToDiscord.ts:        logger.info('Successfully logged in to Discord.');
src/message/discord/utils/loginToDiscord.ts:        logger.error(errorMessage);
src/message/discord/utils/handleAudioStream.ts:import Logger from '@utils/logger';
src/message/discord/utils/handleAudioStream.ts:    logger.debug('handleAudioStream: Initialized for user ' + userId);
src/message/discord/utils/handleAudioStream.ts:        logger.info('Receiving audio data from user ' + userId);
src/message/discord/utils/handleAudioStream.ts:        logger.debug('handleAudioStream: Collected audio chunk of size ' + chunk.length);
src/message/discord/utils/handleAudioStream.ts:        logger.debug('handleAudioStream: End of audio stream for user ' + userId);
src/message/discord/utils/handleAudioStream.ts:            logger.debug('handleAudioStream: Concatenated audio buffer size ' + audioBuffer.length);
src/message/discord/utils/handleAudioStream.ts:                logger.warn('handleAudioStream: Audio buffer is empty, skipping transcription');
src/message/discord/utils/handleAudioStream.ts:            logger.debug('handleAudioStream: Saved WAV file size ' + stats.size);
src/message/discord/utils/handleAudioStream.ts:                logger.warn('handleAudioStream: WAV file size is 0, skipping transcription');
src/message/discord/utils/handleAudioStream.ts:                logger.info('Transcription: ' + transcript);
src/message/discord/utils/handleAudioStream.ts:                logger.debug('handleAudioStream: Transcription successful');
src/message/discord/utils/handleAudioStream.ts:                logger.debug('handleAudioStream: Generated response: ' + response);
src/message/discord/utils/handleAudioStream.ts:                logger.debug('handleAudioStream: Played audio response');
src/message/discord/utils/handleAudioStream.ts:                logger.warn('handleAudioStream: Transcription returned null or undefined');
src/message/discord/utils/handleAudioStream.ts:            logger.error('handleAudioStream: Error processing audio stream for user ' + userId + ': ' + (error instanceof Error ? error.message : String(error)));
src/message/discord/utils/handleAudioStream.ts:            logger.debug('handleAudioStream: Error stack trace: ' + error.stack);
src/message/discord/utils/handleAudioStream.ts:        logger.error('handleAudioStream: Error in audio stream for user ' + userId + ': ' + error.message);
src/message/discord/utils/handleAudioStream.ts:        logger.debug('handleAudioStream: Stream error stack trace: ' + error.stack);
src/message/discord/utils/startTyping.ts:import Logger from '@utils/logger';
src/message/discord/utils/startTyping.ts:        logger.debug('[DiscordManager] Fetching channel ID: ' + channelId);
src/message/discord/utils/startTyping.ts:        logger.debug('[DiscordManager] Fetched channel: ' + (channel ? channel.id : 'null'));
src/message/discord/utils/startTyping.ts:            logger.error('[DiscordManager] Channel with ID: ' + channelId + ' not found.');
src/message/discord/utils/startTyping.ts:        logger.debug('[DiscordManager] Channel type: ' + channel.type);
src/message/discord/utils/startTyping.ts:                logger.error('[DiscordManager] Missing SEND_MESSAGES permission in channel ID: ' + channelId);
src/message/discord/utils/startTyping.ts:            logger.debug('[DiscordManager] Started typing in channel ID: ' + channelId);
src/message/discord/utils/startTyping.ts:            logger.debug('[DiscordManager] Channel ID: ' + channelId + ' does not support typing.');
src/message/discord/utils/startTyping.ts:        logger.error('[DiscordManager] Failed to start typing in channel ID: ' + channelId + ': ' + (error instanceof Error ? error.message : String(error)));
src/message/discord/utils/playWelcomeMessage.ts:import Logger from '@utils/logger';
src/message/discord/utils/playWelcomeMessage.ts:    logger.info('Playing welcome message: ' + welcomeMessage);
src/message/discord/utils/playWelcomeMessage.ts:            logger.error('Error playing welcome message: ' + error.message);
src/message/discord/utils/playWelcomeMessage.ts:        logger.error('Error generating welcome message: ' + error.message);
src/message/discord/utils/playWelcomeMessage.ts:            logger.error('Response status: ' + error.response.status);
src/message/discord/utils/playWelcomeMessage.ts:            logger.error('Response data: ' + JSON.stringify(error.response.data));
src/message/discord/utils/convertOpusToWav.ts:import Logger from '@utils/logger';
src/message/discord/utils/convertOpusToWav.ts:            logger.debug('convertOpusToWav: Received chunk of size ' + chunk.length);
src/message/discord/utils/convertOpusToWav.ts:                logger.error('convertOpusToWav: Conversion resulted in empty buffer. Error output: ' + errorOutput);
src/message/discord/utils/convertOpusToWav.ts:                logger.debug('convertOpusToWav: Converted buffer size ' + wavBuffer.length);
src/message/discord/utils/convertOpusToWav.ts:            logger.error('convertOpusToWav: ffmpeg stdout error: ' + error.message);
src/message/discord/utils/convertOpusToWav.ts:            logger.error('convertOpusToWav: ffmpeg stdin error: ' + error.message);
src/message/followUpRequest.ts:import Logger from '@utils/logger';
src/message/followUpRequest.ts:        logger.error(`Error in shouldSendFollowUp: ${error.message}`);
src/message/followUpRequest.ts:        logger.error(`Error in scheduleFollowUpRequest: ${error.message}`);
src/message/types/IMessage.ts:import Logger from '@utils/logger';
src/message/types/IMessage.ts:        logger.debug('IMessage initialized with data: ' + JSON.stringify(data));
src/message/types/IMessengerService.ts:import Logger from '@utils/logger';
src/message/types/IMessengerService.ts:        logger.debug('IMessengerService instantiated');
src/message/helpers/messageProcessing/summarizeMessage.ts:import Logger from '@utils/logger';
src/message/helpers/messageProcessing/summarizeMessage.ts:        logger.error('[summarizeMessage] Invalid content type: ' + typeof content, { content });
src/message/helpers/messageProcessing/summarizeMessage.ts:        logger.info('[summarizeMessage] Content summarized to ' + summary.length + ' characters.', { summary });
src/message/helpers/messageProcessing/summarizeMessage.ts:        logger.error('[summarizeMessage] Failed to summarize content: ' + error.message + ', returning original content.', { error });
src/message/helpers/messageProcessing/prepareMessageBody.ts:import Logger from '@utils/logger';
src/message/helpers/messageProcessing/prepareMessageBody.ts:        logger.error('[prepareMessageBody] Invalid prompt type: ' + typeof prompt, { prompt });
src/message/helpers/messageProcessing/prepareMessageBody.ts:        logger.error('[prepareMessageBody] Invalid channelId type: ' + typeof channelId, { channelId });
src/message/helpers/messageProcessing/prepareMessageBody.ts:        logger.error('[prepareMessageBody] Invalid history type: ' + typeof history, { history });
src/message/helpers/messageProcessing/prepareMessageBody.ts:    logger.debug('[prepareMessageBody] Preparing message body for channel ID: ' + channelId + ' with prompt: ' + prompt.substring(0, 50) + '...', { prompt, channelId });
src/message/helpers/messageProcessing/processCommand.ts:import Logger from '@utils/logger';
src/message/helpers/messageProcessing/processCommand.ts:        logger.error('[processCommand] Invalid message object.', { message });
src/message/helpers/messageProcessing/processCommand.ts:    logger.debug('[processCommand] Processing text: ' + text);
src/message/helpers/messageProcessing/processCommand.ts:        logger.debug('[processCommand] No command prefix found in: ' + text);
src/message/helpers/messageProcessing/processCommand.ts:            logger.info('[processCommand] Command "' + commandResult.command + '" executed successfully.', { commandResult });
src/message/helpers/messageProcessing/processCommand.ts:            logger.error('[processCommand] Command "' + commandResult.command + '" failed with error: ' + commandResult.error, { commandResult });
src/message/helpers/messageProcessing/processCommand.ts:        logger.error('[processCommand] Exception while executing command: ' + error.message, { error });
src/message/helpers/loadServerPolicy.ts:import Logger from '@utils/logger';
src/message/helpers/loadServerPolicy.ts:        logger.debug('[loadServerPolicy] Server policy loaded successfully.');
src/message/helpers/loadServerPolicy.ts:        logger.error('[loadServerPolicy] Failed to load server policy: ' + error.message);
src/message/helpers/messageResponseUtils.ts:import Logger from '@utils/logger';
src/message/helpers/messageResponseUtils.ts:        logger.info('Logged reply for channel ' + channelId + ' at ' + currentTime);
src/message/helpers/handleCodeBlocks.ts:import Logger from '@utils/logger';
src/message/helpers/handleCodeBlocks.ts:        logger.debug(`Found code block with label: ${label || 'none'}`);
src/message/helpers/commandParser.ts:import Logger from '@utils/logger';
src/message/helpers/commandParser.ts:        logger.warn('No command content provided to parseCommand');
src/message/helpers/commandParser.ts:    logger.debug('Attempting to parse command content: ' + commandContent);
src/message/helpers/commandParser.ts:        logger.debug('Parsed command - Name: ' + commandName + ', Action: ' + action + ', Args: ' + args);
src/message/helpers/commandParser.ts:            logger.debug('Fallback to default command: ' + defaultCommand + ' with args: ' + argsWithoutMention);
src/message/helpers/commandParser.ts:    logger.debug('Command content did not match expected pattern and no default command could be applied.');
src/message/helpers/sendResponse.ts:import Logger from '@utils/logger';
src/message/helpers/sendResponse.ts:    logger.debug(`[sendResponse] Starting to send response to channel ${channelId}. Initial content length: ${messageContent.length}`);
src/message/helpers/sendResponse.ts:        logger.debug(`[sendResponse] Message split into ${parts.length} parts due to length exceeding ${maxPartLength} characters or random split condition.`);
src/message/helpers/sendResponse.ts:        logger.debug(`[sendResponse] Sent part ${i + 1} of ${parts.length}.`);
src/message/helpers/sendResponse.ts:    logger.info(`[sendResponse] Message processing complete. Total time: ${processingTime}ms.`);
src/message/helpers/sendResponse.ts:    logger.debug(`[sendMessagePart] Sending message part to channel ${channelId}. Content length: ${part.length}.`);
src/message/helpers/sendResponse.ts:    logger.debug(`[sendMessagePart] Message part sent to channel ${channelId}.`);
src/message/helpers/votingUtils.ts:import Logger from '@utils/logger';
src/message/helpers/votingUtils.ts:    logger.debug(`[votingUtils] Starting voting process for user ID: \${userId}`);
src/message/helpers/votingUtils.ts:    logger.debug(`[votingUtils] Checking voting eligibility for user ID: \${userId}`);
src/message/helpers/mutingUtils.ts:import Logger from '@utils/logger';
src/message/helpers/mutingUtils.ts:    logger.debug('Muting user with ID: ' + userId + ' in channel: ' + channel.id);
src/message/helpers/mutingUtils.ts:        logger.error('Mute role not found');
src/message/helpers/mutingUtils.ts:    logger.debug('User muted successfully');
src/message/helpers/mutingUtils.ts:    logger.debug('Mute confirmation message sent');
src/message/helpers/moderationUtils.ts:import Logger from '@utils/logger';
src/message/helpers/moderationUtils.ts:        logger.debug('Moderation decision request sent for user ' + userId, { userId, prompt });
src/message/helpers/moderationUtils.ts:            logger.warn('Moderation decision request did not return expected data.');
src/message/helpers/moderationUtils.ts:        logger.error('Error determining ban for user ' + userId + ': ' + error);
src/message/helpers/shouldProcessMessage.ts:import Logger from '@utils/logger';
src/message/helpers/shouldProcessMessage.ts:    logger.debug('[shouldProcessMessage] Checking if message in channel ' + channelId + ' should be processed.');
src/message/helpers/shouldProcessMessage.ts:        logger.debug('[shouldProcessMessage] Skipping message from bot itself in channel ' + channelId + '.');
src/message/helpers/shouldProcessMessage.ts:    logger.debug('[shouldProcessMessage] Time since last message in channel ' + channelId + ': ' + timeSinceLastMessage + 'ms.');
src/message/helpers/shouldProcessMessage.ts:        logger.debug('[shouldProcessMessage] Skipping message in channel ' + channelId + ' due to short interval: ' + timeSinceLastMessage + 'ms.');
src/message/helpers/shouldProcessMessage.ts:    logger.debug('[shouldProcessMessage] Message in channel ' + channelId + ' will be processed.');
src/message/helpers/sendMessagePart.ts:import Logger from '@utils/logger';
src/message/helpers/sendMessagePart.ts:    logger.debug('[sendMessagePart] Sending message part to channel ' + channelId + '. Content length: ' + part.length + '.');
src/message/helpers/sendMessagePart.ts:    logger.debug('[sendMessagePart] Message part sent to channel ' + channelId + '.');
src/message/helpers/chatHistoryUtils.ts:import Logger from '@utils/logger';
src/message/helpers/chatHistoryUtils.ts:        logger.warn('[trimMessagesByTokenCount] No messages provided.');
src/message/helpers/chatHistoryUtils.ts:        logger.warn('[trimMessagesByTokenCount] Invalid prompt or maxTokens provided.');
src/message/helpers/chatHistoryUtils.ts:    logger.debug('[trimMessagesByTokenCount] Trimmed history based on token count: ' + trimmedMessages.length + ' messages retained');
src/message/helpers/getInitialDelay.ts:import Logger from '@utils/logger';
src/message/helpers/getInitialDelay.ts:    logger.debug('[getInitialDelay] Time since last typing in channel ' + channelId + ': ' + timeSinceLastTyping + 'ms.');
src/message/helpers/getInitialDelay.ts:    logger.debug('[getInitialDelay] Calculated delay for channel ' + channelId + ': ' + delay + 'ms.');
src/message/helpers/parseCommand.ts:import Logger from '@utils/logger';
src/message/helpers/parseCommand.ts:        logger.warn('[parseCommand] No command content provided.');
src/message/helpers/parseCommand.ts:    logger.debug('[parseCommand] Attempting to parse command content: ' + commandContent + '');
src/message/helpers/parseCommand.ts:        logger.debug('[parseCommand] Parsed command - Name: ' + commandName + ', Action: ' + action + ', Args: ' + args);
src/message/helpers/parseCommand.ts:    logger.debug('[parseCommand] Command content did not match expected pattern.');
src/message/handlers/messageHandler.ts:import Logger from '@utils/logger';
src/message/handlers/messageHandler.ts:        logger.error('[messageHandler] No original message provided.');
src/message/handlers/messageHandler.ts:    logger.debug('[messageHandler] originalMsg: ' + JSON.stringify(originalMsg));
src/message/handlers/messageHandler.ts:    logger.debug('[messageHandler] Started processing message ID: ' + messageId + ' at ' + new Date(startTime).toISOString());
src/message/handlers/messageHandler.ts:        logger.error('[messageHandler] originalMsg is not an instance of IMessage. Actual type: ' + originalMsg.constructor.name);
src/message/handlers/messageHandler.ts:        logger.debug('[messageHandler] originalMsg is a valid instance of IMessage.');
src/message/handlers/messageHandler.ts:        logger.error('[messageHandler] originalMsg does not have a valid getText method.');
src/message/handlers/messageHandler.ts:        logger.debug('[messageHandler] originalMsg has a valid getText method.');
src/message/handlers/messageHandler.ts:        logger.info('[messageHandler] Received empty message.');
src/message/handlers/messageHandler.ts:        logger.debug('[messageHandler] Message validation failed.');
src/message/handlers/messageHandler.ts:    logger.debug('[messageHandler] validated message');
src/message/handlers/messageHandler.ts:        logger.debug('[messageHandler] processed command');
src/message/handlers/messageHandler.ts:        logger.error('[validateMessage] Invalid message object type. Expected IMessage instance, got: ' + message.constructor.name);
src/message/handlers/messageHandler.ts:        logger.error('[validateMessage] Message object does not have a valid getText method.');
src/message/handlers/messageHandler.ts:        logger.info('[validateMessage] Received empty message.');
src/message/handlers/messageHandler.ts:    logger.debug('[validateMessage] Message validated successfully.');
src/message/handlers/messageHandler.ts:    logger.debug('[messageHandler] process ai response');
src/message/handlers/messageHandler.ts:        logger.info('[messageHandler] No AI response deemed necessary based on the content and context.');
src/message/handlers/messageHandler.ts:        logger.info('[messageHandler] LLM Manager busy.');
src/message/handlers/messageHandler.ts:    logger.debug('[messageHandler] processAiResponse called.');
src/message/handlers/messageHandler.ts:        logger.debug('[messageHandler] channel topic is ' + topic + '.');
src/message/handlers/messageHandler.ts:            logger.debug('[messageHandler] LLM request body prepared: ' + JSON.stringify(requestBody));
src/message/handlers/messageHandler.ts:            logger.error('[messageHandler] Error preparing LLM request body: ' + error.message, { error });
src/message/handlers/messageHandler.ts:            logger.debug('[messageHandler] LLM request sent successfully.');
src/message/handlers/messageHandler.ts:            logger.error('[messageHandler] Error sending LLM request: ' + error.message, { error });
src/message/handlers/messageHandler.ts:            logger.debug('[messageHandler] LLM response received. Response Content: ' + responseContent);
src/message/handlers/messageHandler.ts:                logger.error('[messageHandler] Invalid response content type: ' + typeof responseContent);
src/message/handlers/messageHandler.ts:                logger.error('[messageHandler] LLM response finished with reason: ' + finishReason);
src/message/handlers/messageHandler.ts:                logger.error('[messageHandler] LLM provided an empty or invalid response.');
src/message/handlers/messageHandler.ts:                logger.info('[messageHandler] LLM response exceeded maximum length and was summarized.');
src/message/handlers/messageHandler.ts:            logger.error('[messageHandler] Error processing LLM response content: ' + error.message, { error });
src/message/handlers/messageHandler.ts:        logger.debug('[messageHandler] Preparing to send response. Response Content: ' + responseContent);
src/message/handlers/messageHandler.ts:            logger.error('[messageHandler] responseContent is not string or is not Buffer');
src/message/handlers/messageHandler.ts:            logger.info('[messageHandler] LLM response sent to the channel successfully.');
src/message/handlers/messageHandler.ts:            logger.error('[messageHandler] Error sending response to channel: ' + error.message, { error });
src/message/handlers/messageHandler.ts:                logger.debug('[messageHandler] Follow-up interaction initiated.');
src/message/handlers/messageHandler.ts:                logger.error('[messageHandler] Error initiating follow-up interaction: ' + error.message, { error });
src/message/handlers/messageHandler.ts:        logger.info('[messageHandler] Message processing completed in ' + processingTime + 'ms.');
src/message/responseHandling/MessageResponseManager.ts:import Logger from '@utils/logger';
src/message/responseHandling/MessageResponseManager.ts:        logger.debug('Configuration loaded: ', config);
src/message/responseHandling/MessageResponseManager.ts:        logger.debug('[MessageResponseManager] Evaluating reply possibility for message from channel ' + channelId);
src/message/responseHandling/MessageResponseManager.ts:            logger.debug('[MessageResponseManager] Message is not eligible for a response.');
src/message/responseHandling/MessageResponseManager.ts:            logger.debug('[MessageResponseManager] Channel has exceeded the unsolicited message limit.');
src/message/responseHandling/MessageResponseManager.ts:        logger.debug('[MessageResponseManager] Decision to send response: ' + shouldSend);
src/message/responseHandling/MessageResponseManager.ts:        logger.debug('Message eligibility for response: ' + isEligible);
src/message/responseHandling/MessageResponseManager.ts:        logger.debug('Unsolicited message limit check for channel ' + channelId + ': ' + isWithinLimit);
src/message/responseHandling/MessageResponseManager.ts:        logger.debug('Should send response (random < baseChance): ' + decision + ' (' + Math.random() + ' < ' + baseChance + ')');
src/message/responseHandling/MessageResponseManager.ts:            logger.debug('[MessageResponseManager] Not responding to self-generated messages.');
src/message/responseHandling/MessageResponseManager.ts:        logger.debug('[MessageResponseManager] Calculating base chance for message: ' + message.getText());
src/message/responseHandling/MessageResponseManager.ts:            logger.debug('[MessageResponseManager] Wakeword found, responding immediately.');
src/message/responseHandling/MessageResponseManager.ts:            logger.debug('[MessageResponseManager] Interrobang bonus applied: +' + this.config.interrobangBonus);
src/message/responseHandling/MessageResponseManager.ts:            logger.debug('[MessageResponseManager] Mention bonus applied: +' + this.config.mentionBonus);
src/message/responseHandling/MessageResponseManager.ts:            logger.debug('[MessageResponseManager] Bot response modifier applied: +' + this.config.botResponseModifier);
src/message/responseHandling/MessageResponseManager.ts:            logger.debug('[MessageResponseManager] Bot response modifier applied: +' + this.config.botResponseModifier);
src/message/responseHandling/MessageResponseManager.ts:            logger.debug('[MessageResponseManager] Priority channel bonus applied: +' + this.config.priorityChannelBonus);
src/message/responseHandling/MessageResponseManager.ts:        logger.debug('[MessageResponseManager] Final calculated chance after decay factor (' + decayFactor.toFixed(4) + '): ' + chance.toFixed(4));
src/utils/utils.ts:import Logger from './logger';
src/utils/utils.ts:    logger.debug('Executing command: ' + command);
src/utils/utils.ts:        logger.error('Error executing command: ' + stderr);
src/utils/utils.ts:    logger.debug('Command output: ' + stdout);
src/utils/utils.ts:    logger.debug('Reading file: ' + filePath);
src/utils/utils.ts:    logger.debug('File content: ' + content);
src/utils/logger.ts:const logger = pino({
src/utils/logger.ts:if (!logger.warn) {
src/utils/logger.ts:    logger.warn = logger.info.bind(logger);
src/utils/logger.ts:export default logger;
src/utils/logger.d.ts:declare const logger: any;
src/utils/logger.d.ts:export default logger;
src/utils/commonUtils.ts:import Logger from './logger';
src/utils/commonUtils.ts:        logger.error('Error selecting a random message: Index out of bounds.');
src/utils/commonUtils.ts:        logger.error(`Invalid key type: ${typeof key}. Key must be a string.`);
src/utils/commonUtils.ts:            logger.error(`Error stringifying value: ${error.message}`);
src/utils/commonUtils.ts:    logger.error(`Error Mesage: ${error.message}`);
src/utils/commonUtils.ts:    logger.error(`Error Stack Trace: ${error.stack}`);
src/utils/index.ts:import Logger from './logger';
src/utils/index.ts:    logger,
src/utils/aliasUtils.ts:import Logger from '@utils/logger';
src/utils/aliasUtils.ts:        logger.warn('No aliases available.');
src/utils/aliasUtils.ts:    logger.debug('Generated random alias command: ' + randomCommand);
src/utils/aliasUtils.ts:    logger.debug('Fetched alias description for command: ' + commandName + ', description: ' + description);
src/utils/aliasUtils.ts:    logger.debug('Listing all aliases');
src/utils/aliasUtils.ts:    logger.debug('Found aliases by category: ' + category);
src/utils/aliasUtils.ts:        logger.debug(message);
src/utils/aliasUtils.ts:    logger.debug('Fetched detailed info for command: ' + commandName + ', info: ' + detailedInfo);
src/llm/OpenAiManager.ts:import Logger from '@utils/logger';
src/llm/OpenAiManager.ts:            logger.error('[makeOpenAiRequest] Invalid OpenAI client instance passed.');
src/llm/OpenAiManager.ts:            logger.error('[makeOpenAiRequest] Invalid request body passed.');
src/llm/OpenAiManager.ts:        logger.debug('[makeOpenAiRequest] Sending request with body: ' + JSON.stringify(requestBody));
src/llm/OpenAiManager.ts:                logger.debug(`[makeOpenAiRequest] Request timeout set to ${requestOptions.timeout} ms`);
src/llm/OpenAiManager.ts:                logger.error('[makeOpenAiRequest] No valid response or choices returned from the API.');
src/llm/OpenAiManager.ts:            logger.debug('[makeOpenAiRequest] Received response: ' + JSON.stringify(response));
src/llm/OpenAiManager.ts:            logger.error('[makeOpenAiRequest] Failed to make OpenAI request: ' + error.message, error);
src/llm/OpenAiManager.ts:            logger.error('[completeSentence] The content must be a string.');
src/llm/OpenAiManager.ts:        logger.debug('[completeSentence] Content type: ' + typeof content + ', content value: ' + content);
src/llm/OpenAiManager.ts:            logger.debug('[completeSentence] Content already ends with a punctuation mark.');
src/llm/OpenAiManager.ts:        logger.debug('[completeSentence] Sending continuation request: ' + JSON.stringify(continuationBody));
src/llm/OpenAiManager.ts:                logger.error('[completeSentence] No valid choices returned from the API.');
src/llm/OpenAiManager.ts:                logger.debug('[completeSentence] Received continuation text: ' + continuationText);
src/llm/OpenAiManager.ts:                logger.warn('[completeSentence] Received empty continuation text.');
src/llm/OpenAiManager.ts:            logger.error('[completeSentence] Error completing sentence:', error);
src/llm/OpenAiManager.ts:            logger.warn('[summarizeText] Summarization requires completions support which is disabled.');
src/llm/OpenAiManager.ts:        logger.debug('[summarizeText] Sending summarization request with prompt: ' + prompt);
src/llm/OpenAiManager.ts:            logger.info('[summarizeText] Summary processed successfully.');
src/llm/openai/OpenAiManager.ts:import Logger from '@utils/logger';;
src/llm/openai/OpenAiManager.ts:            logger.warn('[OpenAiManager.sendRequest] The manager is currently busy with another request.');
src/llm/openai/OpenAiManager.ts:        logger.debug('[OpenAiManager.sendRequest] Sending request to OpenAI');
src/llm/openai/OpenAiManager.ts:        logger.debug('[OpenAiManager.sendRequest] Request body: ' + JSON.stringify(requestBody, redactSensitiveInfo, 2));
src/llm/openai/OpenAiManager.ts:                logger.info('[OpenAiManager.sendRequest] Completing the response due to reaching the token limit or incomplete sentence.');
src/llm/openai/OpenAiManager.ts:            logger.debug('[OpenAiManager.sendRequest] Set busy to false after processing the request.');
src/llm/openai/utils/makeOpenAiRequest.ts:import Logger from '@utils/logger';
src/llm/openai/utils/makeOpenAiRequest.ts:        logger.debug('[makeOpenAiRequest] Sending request to OpenAI API.');
src/llm/openai/utils/makeOpenAiRequest.ts:        logger.debug('[makeOpenAiRequest] Received response from OpenAI API.');
src/llm/openai/utils/makeOpenAiRequest.ts:        logger.error('[makeOpenAiRequest] Error during OpenAI API request: ' + (error instanceof Error ? error.message : String(error)));
src/llm/openai/utils/completeSentence.ts:import Logger from '@utils/logger';
src/llm/openai/utils/completeSentence.ts:    logger.info('[completeSentence] Completing sentence using OpenAI API.');
src/llm/openAiUtils.ts:import Logger from '@utils/logger';;
src/llm/openAiUtils.ts:        logger.debug('[extractContent] Invalid choice object.');
src/llm/openAiUtils.ts:    logger.debug('[extractContent] Initial choice object: ' + JSON.stringify(choice));
src/llm/openAiUtils.ts:        logger.debug('[extractContent] Content extracted directly from text field.');
src/llm/openAiUtils.ts:        logger.debug('[extractContent] Content extracted from message.content field.');
src/llm/openAiUtils.ts:    logger.debug('[extractContent] No valid content found in choice object; returning empty string.');
src/llm/LLMInterface.ts:import Logger from '@utils/logger';
src/llm/LLMInterface.ts:        logger.debug('LLMInterface instantiated');
src/llm/LLMInterface.ts:        logger.debug('getManager called');
src/llm/LLMInterface.ts:                logger.error('Unsupported LLM Provider specified in constants: ' + constants.LLM_PROVIDER);
src/llm/LLMInterface.ts:        logger.debug('requiresHistory called');
src/index.ts:import Logger from '@utils/logger';
src/managers/DiscordManager-20240725.bak:const logger = require('../utils/logger');
src/managers/DiscordManager-20240725.bak:            logger.debug(`convertOpusToWav: Received chunk of size ${chunk.length}`);
src/managers/DiscordManager-20240725.bak:                logger.error(`convertOpusToWav: Conversion resulted in empty buffer. Error output: ${errorOutput}`);
src/managers/DiscordManager-20240725.bak:                logger.debug(`convertOpusToWav: Converted buffer size ${wavBuffer.length}`);
src/managers/DiscordManager-20240725.bak:            logger.error(`convertOpusToWav: ffmpeg stdout error: ${error.message}`);
src/managers/DiscordManager-20240725.bak:            logger.error(`convertOpusToWav: ffmpeg stdin error: ${error.message}`);
src/managers/DiscordManager-20240725.bak:            logger.info(`Bot connected as ${this.client.user.tag}`);
src/managers/DiscordManager-20240725.bak:            logger.error('DISCORD_TOKEN is not defined in the configuration. Exiting...');
src/managers/DiscordManager-20240725.bak:                logger.error('Error logging into Discord:', error);
src/managers/DiscordManager-20240725.bak:    logger.debug(`VOICE_CHANNEL_ID: ${VOICE_CHANNEL_ID}`);
src/managers/DiscordManager-20240725.bak:        logger.warn('VOICE_CHANNEL_ID is not set in the environment variables.');
src/managers/DiscordManager-20240725.bak:        logger.debug(`Fetched channel: ${channel ? channel.id : 'null'}`);
src/managers/DiscordManager-20240725.bak:            logger.error(`Channel with ID ${VOICE_CHANNEL_ID} is not a valid voice channel.`);
src/managers/DiscordManager-20240725.bak:            logger.error('Client user is not defined.');
src/managers/DiscordManager-20240725.bak:        logger.debug(`Permissions for channel: ${permissions ? permissions.bitfield : 'null'}`);
src/managers/DiscordManager-20240725.bak:            logger.error(`Unable to fetch permissions for channel: ${channel.name}`);
src/managers/DiscordManager-20240725.bak:            logger.error(`Missing CONNECT permission for voice channel: ${channel.name}`);
src/managers/DiscordManager-20240725.bak:            logger.error(`Missing SPEAK permission for voice channel: ${channel.name}`);
src/managers/DiscordManager-20240725.bak:            logger.error(`Missing USE_VOICE_ACTIVITY permission for voice channel: ${channel.name}`);
src/managers/DiscordManager-20240725.bak:        logger.info(`Attempting to join voice channel: ${channel.name} (${channel.id})`);
src/managers/DiscordManager-20240725.bak:        logger.debug('Voice connection object:', connection);
src/managers/DiscordManager-20240725.bak:            logger.info(`Successfully connected to the voice channel: ${channel.name}`);
src/managers/DiscordManager-20240725.bak:                logger.warn('Disconnected from the voice channel.');
src/managers/DiscordManager-20240725.bak:            logger.warn('Voice connection destroyed.');
src/managers/DiscordManager-20240725.bak:            logger.error(`Voice connection error: ${error.message}`);
src/managers/DiscordManager-20240725.bak:            logger.info(`User ${userId} started speaking`);
src/managers/DiscordManager-20240725.bak:            logger.info(`User ${userId} stopped speaking`);
src/managers/DiscordManager-20240725.bak:        logger.error(`Error setting up voice channel: ${error.message}`);
src/managers/DiscordManager-20240725.bak:        logger.info(`Playing welcome message: "${welcomeMessage}"`);
src/managers/DiscordManager-20240725.bak:        logger.debug('Dependency Report:\n' + generateDependencyReport());
src/managers/DiscordManager-20240725.bak:                logger.error(`Error playing welcome message: ${error.message}`);
src/managers/DiscordManager-20240725.bak:            logger.error(`Error generating welcome message: ${error.message}`);
src/managers/DiscordManager-20240725.bak:                logger.error(`Response status: ${error.response.status}`);
src/managers/DiscordManager-20240725.bak:                logger.error(`Response data: ${JSON.stringify(error.response.data)}`);
src/managers/DiscordManager-20240725.bak:        logger.debug('transcribeAudio: Response data:', response.data);
src/managers/DiscordManager-20240725.bak:        logger.error(`transcribeAudio: Error transcribing audio: ${error.message}`);
src/managers/DiscordManager-20240725.bak:            logger.debug(`transcribeAudio: Response status: ${error.response.status}`);
src/managers/DiscordManager-20240725.bak:            logger.debug(`transcribeAudio: Response data: ${JSON.stringify(error.response.data)}`);
src/managers/DiscordManager-20240725.bak:    logger.debug(`handleAudioStream: Initialized for user ${userId}`);
src/managers/DiscordManager-20240725.bak:        logger.info(`Receiving audio data from user ${userId}`);
src/managers/DiscordManager-20240725.bak:        logger.debug(`handleAudioStream: Collected audio chunk of size ${chunk.length}`);
src/managers/DiscordManager-20240725.bak:        logger.debug(`handleAudioStream: End of audio stream for user ${userId}`);
src/managers/DiscordManager-20240725.bak:            logger.debug(`handleAudioStream: Concatenated audio buffer size ${audioBuffer.length}`);
src/managers/DiscordManager-20240725.bak:                logger.warn(`handleAudioStream: Audio buffer is empty, skipping transcription`);
src/managers/DiscordManager-20240725.bak:            logger.debug(`handleAudioStream: Saved WAV file size ${stats.size}`);
src/managers/DiscordManager-20240725.bak:                logger.warn(`handleAudioStream: WAV file size is 0, skipping transcription`);
src/managers/DiscordManager-20240725.bak:                logger.info(`Transcription: ${transcript}`);
src/managers/DiscordManager-20240725.bak:                logger.debug(`handleAudioStream: Transcription successful`);
src/managers/DiscordManager-20240725.bak:                logger.debug(`handleAudioStream: Generated response: ${response}`);
src/managers/DiscordManager-20240725.bak:                logger.debug(`handleAudioStream: Played audio response`);
src/managers/DiscordManager-20240725.bak:                logger.warn(`handleAudioStream: Transcription returned null or undefined`);
src/managers/DiscordManager-20240725.bak:            logger.error(`handleAudioStream: Error processing audio stream for user ${userId}: ${error.message}`);
src/managers/DiscordManager-20240725.bak:            logger.debug(`handleAudioStream: Error stack trace: ${error.stack}`);
src/managers/DiscordManager-20240725.bak:        logger.error(`handleAudioStream: Error in audio stream for user ${userId}: ${error.message}`);
src/managers/DiscordManager-20240725.bak:        logger.debug(`handleAudioStream: Stream error stack trace: ${error.stack}`);
src/managers/DiscordManager-20240725.bak:            logger.error('LLM_ENDPOINT_URL is not set in the environment variables.');
src/managers/DiscordManager-20240725.bak:        logger.debug(`LLM_ENDPOINT_URL: ${llmEndpointUrl}`);
src/managers/DiscordManager-20240725.bak:            logger.error('NARRATION_ENDPOINT_URL is not set in the environment variables.');
src/managers/DiscordManager-20240725.bak:        logger.debug(`NARRATION_ENDPOINT_URL: ${narrationEndpointUrl}`);
src/managers/DiscordManager-20240725.bak:            logger.error(`Error playing audio response: ${error.message}`);
src/managers/DiscordManager-20240725.bak:                logger.debug(`[DiscordManager] Received message object: ${JSON.stringify(discordMessage)}`);
src/managers/DiscordManager-20240725.bak:                    logger.error(`[DiscordManager] Discord client is not initialized.`);
src/managers/DiscordManager-20240725.bak:                    logger.error(`[DiscordManager] Invalid or incomplete message received: ID: ${processedMessage.getMessageId()}, Content: ${processedMessage.getText()}`);
src/managers/DiscordManager-20240725.bak:                    logger.debug(`[DiscordManager] Skipping response to own message ID: ${processedMessage.getMessageId()}`);
src/managers/DiscordManager-20240725.bak:                logger.debug(`[DiscordManager] Processed message ID: ${processedMessage.getMessageId()}`);
src/managers/DiscordManager-20240725.bak:                    logger.error(`[DiscordManager] Processed message has no valid channel ID.`);
src/managers/DiscordManager-20240725.bak:                    logger.error(`[DiscordManager] Could not fetch channel with ID: ${channelId}`);
src/managers/DiscordManager-20240725.bak:                logger.debug(`[DiscordManager] Fetched channel: ${channel.id}`);
src/managers/DiscordManager-20240725.bak:                    logger.info(`Channel topic: ${channel.topic || "No topic"}. History messages count: ${historyMessages.length}`);
src/managers/DiscordManager-20240725.bak:                    logger.debug(`Executing message handler on channel ${channel.id}`);
src/managers/DiscordManager-20240725.bak:                    // logger.debug(`Handler Args - Processed Message: ${JSON.stringify(processedMessage)}, History Messages: ${JSON.stringify(historyMessages)}, Channel: ${JSON.stringify(channel)}`);
src/managers/DiscordManager-20240725.bak:                logger.error(`[DiscordManager] Error processing message: ${error.message}`, { error });
src/managers/DiscordManager-20240725.bak:            logger.debug(`[DiscordManager] Fetching channel ID: ${channelId}`);
src/managers/DiscordManager-20240725.bak:            logger.debug(`[DiscordManager] Fetched channel: ${channel ? channel.id : 'null'}`);
src/managers/DiscordManager-20240725.bak:                logger.error(`[DiscordManager] Channel with ID: ${channelId} not found.`);
src/managers/DiscordManager-20240725.bak:            logger.debug(`[DiscordManager] Channel type: ${channel.type}`);
src/managers/DiscordManager-20240725.bak:                    logger.error(`[DiscordManager] Missing SEND_MESSAGES permission in channel ID: ${channelId}`);
src/managers/DiscordManager-20240725.bak:                logger.debug(`[DiscordManager] Started typing in channel ID: ${channelId}`);
src/managers/DiscordManager-20240725.bak:                logger.debug(`[DiscordManager] Channel ID: ${channelId} does not support typing.`);
src/managers/DiscordManager-20240725.bak:            logger.error(`[DiscordManager] Failed to start typing in channel ID: ${channelId}: ${error}`);
src/common/config/ConfigurationManager.ts:import Logger from '@utils/logger';
src/common/errors/handleError.ts:import Logger from '@utils/logger';
src/command/common/mute.ts:import { logger } from '@utils/logger';
src/command/common/perplexity.ts:import Logger from '@utils/logger';
src/command/common/replicate.ts:import Logger from '@utils/logger';
src/command/common/server.ts:import Logger from '@utils/logger';
src/command/isCommand.ts:import Logger from '@utils/logger';
src/command/inline/mute.ts:import Logger from '@utils/logger';
src/command/inline/http.ts:import Logger from '@utils/logger';
src/command/inline/memgpt.ts:import Logger from '@utils/logger';
src/command/inline/oai.ts:import Logger from '@utils/logger';
src/command/inline/help.ts.offline:import Logger from '@utils/logger';
src/command/inline/ban.ts:import Logger from '@utils/logger';
src/command/inline/report.ts:import Logger from '@utils/logger';
src/command/inline/replicate.ts:import Logger from '@utils/logger';
src/command/inline/index.ts:import Logger from '@utils/logger';
src/command/inline/flowise.ts:import Logger from '@utils/logger';
src/command/types/Command.ts:import Logger from '@utils/logger';
src/command/parseCommandDetails.ts:import Logger from '@utils/logger';
src/command/handlers/slashCommandHandler.ts:import Logger from '@utils/logger';
src/command/slash/quivr.ts.offline:import Logger from '@utils/logger';
src/command/slash/replicate.ts:import Logger from '@utils/logger';
src/command/commandSetup.ts:import Logger from '@utils/logger';
src/command/CommandManager.ts:import Logger from '@utils/logger';
src/command/executeParsedCommand.ts:import Logger from '@utils/logger';
src/message/followUp/sendResponse.ts:import Logger from '@utils/logger';
src/message/followUp/sendFollowUp.ts:import Logger from '@utils/logger';
src/message/followUp/messageSendingUtils.ts:import Logger from '@utils/logger';
src/message/sendFollowUpRequest.ts:import Logger from '@utils/logger';
src/message/discord/DiscordManager.ts:import Logger from '@utils/logger'; // Ensure logger is correctly imported
src/message/discord/types/DiscordMessage.ts:import Logger from '@utils/logger';
src/message/discord/utils/registerSlashCommands.ts:import Logger from '@utils/logger';
src/message/discord/utils/setupEventHandlers.ts:import Logger from '@utils/logger';
src/message/discord/utils/fetchMessages.ts:import Logger from '@utils/logger';
src/message/discord/utils/sendMessageToChannel.ts:import Logger from '@utils/logger';
src/message/discord/utils/fetchChannel.ts:import Logger from '@utils/logger';
src/message/discord/utils/transcribeAudio.ts:import Logger from '@utils/logger';
src/message/discord/utils/setupVoiceChannel.ts:import Logger from '@utils/logger';
src/message/discord/utils/collectSlashCommands.ts:import Logger from '@utils/logger';
src/message/discord/utils/playAudioResponse.ts:import Logger from '@utils/logger';
src/message/discord/utils/generateResponse.ts:import Logger from '@utils/logger';
src/message/discord/utils/sendResponse.ts:import Logger from '@utils/logger';
src/message/discord/utils/sendMessage.ts:import Logger from '@utils/logger';
src/message/discord/utils/loginToDiscord.ts:import Logger from '@utils/logger';
src/message/discord/utils/handleAudioStream.ts:import Logger from '@utils/logger';
src/message/discord/utils/startTyping.ts:import Logger from '@utils/logger';
src/message/discord/utils/playWelcomeMessage.ts:import Logger from '@utils/logger';
src/message/discord/utils/convertOpusToWav.ts:import Logger from '@utils/logger';
src/message/followUpRequest.ts:import Logger from '@utils/logger';
src/message/types/IMessage.ts:import Logger from '@utils/logger';
src/message/types/IMessengerService.ts:import Logger from '@utils/logger';
src/message/helpers/messageProcessing/summarizeMessage.ts:import Logger from '@utils/logger';
src/message/helpers/messageProcessing/prepareMessageBody.ts:import Logger from '@utils/logger';
src/message/helpers/messageProcessing/processCommand.ts:import Logger from '@utils/logger';
src/message/helpers/loadServerPolicy.ts:import Logger from '@utils/logger';
src/message/helpers/messageResponseUtils.ts:import Logger from '@utils/logger';
src/message/helpers/handleCodeBlocks.ts:import Logger from '@utils/logger';
src/message/helpers/commandParser.ts:import Logger from '@utils/logger';
src/message/helpers/sendResponse.ts:import Logger from '@utils/logger';
src/message/helpers/votingUtils.ts:import Logger from '@utils/logger';
src/message/helpers/mutingUtils.ts:import Logger from '@utils/logger';
src/message/helpers/moderationUtils.ts:import Logger from '@utils/logger';
src/message/helpers/shouldProcessMessage.ts:import Logger from '@utils/logger';
src/message/helpers/sendMessagePart.ts:import Logger from '@utils/logger';
src/message/helpers/chatHistoryUtils.ts:import Logger from '@utils/logger';
src/message/helpers/getInitialDelay.ts:import Logger from '@utils/logger';
src/message/helpers/parseCommand.ts:import Logger from '@utils/logger';
src/message/handlers/messageHandler.ts:import Logger from '@utils/logger';
src/message/responseHandling/MessageResponseManager.ts:import Logger from '@utils/logger';
src/utils/aliasUtils.ts:import Logger from '@utils/logger';
src/llm/OpenAiManager.ts:import Logger from '@utils/logger';
src/llm/openai/OpenAiManager.ts:import Logger from '@utils/logger';;
src/llm/openai/utils/makeOpenAiRequest.ts:import Logger from '@utils/logger';
src/llm/openai/utils/completeSentence.ts:import Logger from '@utils/logger';
src/llm/openAiUtils.ts:import Logger from '@utils/logger';;
src/llm/LLMInterface.ts:import Logger from '@utils/logger';
src/index.ts:import Logger from '@utils/logger';
